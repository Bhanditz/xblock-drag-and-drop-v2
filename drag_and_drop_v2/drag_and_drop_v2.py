# -*- coding: utf-8 -*-
#

# Imports ###########################################################

import logging
import json
import webob
import copy

from xblock.core import XBlock
from xblock.fields import Scope, String, Dict
from xblock.fragment import Fragment

from .utils import render_template


# Globals ###########################################################

log = logging.getLogger(__name__)


# Classes ###########################################################

class DragAndDropBlock(XBlock):
    """
    XBlock providing a Drag and Drop question
    """
    display_name = String(
        display_name="Title",
        help="The title of the Drag and Drop that is displayed to the user",
        scope=Scope.settings,
        default="Drag and Drop"
    )

    question_text = String(
        display_name="Question text",
        help="The question text that is displayed to the user",
        scope=Scope.settings,
        default=""
    )

    data = Dict(
        display_name="Drag and Drop",
        help="JSON spec as generated by the builder",
        scope=Scope.content,
        default={
            'feedback': {
                'start': '',
                'finish': ''
            },
            'items': [],
            'zones': [],
            'targetImg': None
        }
    )

    item_state = Dict(
        help="How the student has interacted with the problem",
        scope=Scope.user_state,
        default={}
    )

    def student_view(self, context):
        """
        Player view, displayed to the student
        """

        context = {
            'title': self.display_name,
            'question_text': self.question_text
        }

        fragment = Fragment()
        fragment.add_content(render_template('/templates/html/drag_and_drop.html', context))
        fragment.add_css_url(self.runtime.local_resource_url(self,
            'public/css/vendor/jquery-ui-1.10.4.custom.min.css'))
        fragment.add_css_url(self.runtime.local_resource_url(self,
            'public/css/drag_and_drop.css'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/vendor/jquery.html5-placeholder-shim.js'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/vendor/underscore1.6.0.js'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/drag_and_drop.js'))

        fragment.initialize_js('DragAndDropBlock')

        return fragment

    def studio_view(self, context):
        """
        Editing view in Studio
        """

        context = {}

        fragment = Fragment()
        fragment.add_content(render_template('/templates/html/drag_and_drop_edit.html', context))
        fragment.add_css_url(self.runtime.local_resource_url(self,
            'public/css/vendor/jquery-ui-1.10.4.custom.min.css'))
        fragment.add_css_url(self.runtime.local_resource_url(self,
            'public/css/drag_and_drop_edit.css'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/vendor/jquery.html5-placeholder-shim.js'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/vendor/underscore1.6.0.js'))
        fragment.add_javascript_url(self.runtime.local_resource_url(self,
            'public/js/drag_and_drop_edit.js'))

        fragment.initialize_js('DragAndDropEditBlock')

        return fragment

    @XBlock.json_handler
    def studio_submit(self, submissions, suffix=''):
        self.display_name = submissions['display_name']
        self.question_text = submissions['question_text']

        try:
            self.data = json.loads(submissions['data'])
        except ValueError as e:
            return {
                'result': 'error',
                'message': e.message
            }

        return {
            'result': 'success',
        }

    @XBlock.handler
    def get_data(self, request, suffix=''):
        data = copy.deepcopy(self.data)

        for item in data['items']:
            # Strip answers
            del item['feedback']
            del item['zone']

        tot_items = sum(1 for i in self.data['items'] if i['zone'] != 'none')
        if len(self.item_state) != tot_items:
            del data['feedback']['finish']

        data['state'] = self.item_state

        return webob.response.Response(body=json.dumps(data))

    @XBlock.json_handler
    def do_attempt(self, attempt, suffix=''):
        item = next(i for i in self.data['items'] if i['id'] == attempt['val'])
        tot_items = sum(1 for i in self.data['items'] if i['zone'] != 'none')

        if item['zone'] == attempt['zone']:
            self.item_state[item['id']] = (attempt['top'], attempt['left'])

            if len(self.item_state) == tot_items:
                final_feedback = self.data['feedback']['finish']
            else:
                final_feedback = None

            return {
                'correct': True,
                'final_feedback': final_feedback,
                'feedback': item['feedback']['correct']
            }
        else:
            return {
                'correct': False,
                'final_feedback': None,
                'feedback': item['feedback']['incorrect']
            }
